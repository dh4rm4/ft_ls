/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   file_info.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kboddez <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/11/21 12:52:59 by kboddez           #+#    #+#             */
/*   Updated: 2016/11/21 17:16:27 by kboddez          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../v0.1/libft/libft.h"
#include <sys/stat.h>
#include <dirent.h>
#include <stdio.h>

typedef struct		s_elem
{
	char			*name;
	struct stat		infos;
	struct s_elem	*first;
	struct s_elem	*next;
	struct s_elem	*prev;
}					t_elem;

static t_elem	*newmail(t_elem *all)
{
	t_elem	*new;

	new = malloc(sizeof(*new));
	new->prev = all;
	new->first = all->first;
	new->next = NULL;
	return (new);
}

static int	start(int reverse, const char *restrict path)
{
	struct dirent	*rt_dir;
	t_elem			*all;
	char			*perm;
	int				i;
	DIR				*dir;
	char			*old_path;
	size_t			nb_elem;

	i = 0;
	perm = ft_strnew(11);
	all = malloc(sizeof(*all));
	all->first = all;
	all->next = NULL;
	all->prev = NULL;
	if (lstat(path, &(all->infos)) == -1)
	{
		perror("");
		return (-1);
	}
	if (S_ISDIR(all->infos.st_mode))
	{
		if ((dir = opendir(path)) == NULL)
		{
			perror("");
			return (-1);
		}
		while ((rt_dir = readdir(dir)) != NULL)
		{
			all->name = malloc(sizeof(all->name) * ft_strlen(rt_dir->d_name));
			strcpy(all->name, rt_dir->d_name);
			lstat(all->name, &all->infos);
			all->next = newmail(all);
			all = all->next;
		}
		if (!reverse)
		{
			all = all->first;
			while (all->next)
			{
				printf("%s\n", all->name);
				all = all->next;
			}
		}
		else
		{
			all = all->prev;
			while (all)
			{
				printf("%s\n", all->name);
				all = all->prev;
			}
		}
	}
	return (0);
}

int			main(int ac, char *av[])
{
	if (ac > 1)
		return(start(atoi(av[1]), av[2]));
	return (0);
}
